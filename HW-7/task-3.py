# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


class Cell:
    def __init__(self, cells_num):
        self.cells_num = cells_num

    def __add__(self, other):
        return Cell(self.cells_num + other.cells_num)

    def __sub__(self, other):
        if self.cells_num - other.cells_num > 0:
            return Cell(self.cells_num - other.cells_num)
        else:
            print("Deduction Error!!!")
            return Cell(0)
            # raise NameError #я не знаю какуб ошибку поднять, путь будет эта))

    def __mul__(self, other):
        return Cell(self.cells_num * other.cells_num)

    def __truediv__(self, other):
        return Cell(self.cells_num // other.cells_num)

    def make_order(self, raw_len):
        result = ''
        for i in range(self.cells_num // raw_len):
            result += f'{"*" * raw_len}\n'

        result += f'{"*" * (self.cells_num % raw_len)}\n'

        return result

    def __str__(self):
        return f'{self.cells_num}'


cell_1 = Cell(100)
cell_2 = Cell(2)
cell_3 = Cell(1)
print(cell_1 + cell_2 + cell_3)
print(cell_1 - cell_2 - cell_3)
print(cell_1 * cell_2 * cell_3)
print(cell_1 / cell_2 / cell_3)
print(cell_3.make_order(4))
